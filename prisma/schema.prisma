generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  age           Int?
  height        Float?
  weight        Float?
  languageSpeak String?        @default("en-US")
  languageText  String?        @default("en-US")
  gender        GENDER?
  HealthRecord  HealthRecord[]
  Goals         Goals[]
  Conversation  Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthRecord {
  id            String   @id @default(cuid())
  userId        String
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  stepCount     Int?
  heartRate     Int?
  bloodPressure Int?
  bloodOxygen   Int?
}

model Goals {
  id        String   @id @default(cuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  weight    Float?
  calories  Int?
}

model Conversation {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  User      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      CONVERSATION_TYPE
  author    AUTHOR
  message   String
  timestamp DateTime          @default(now())
}

enum GENDER {
  Male
  Female
  Others
}

enum CONVERSATION_TYPE {
  Query
  Support
}

enum AUTHOR {
  user
  bot
}
