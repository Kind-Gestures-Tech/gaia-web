generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SYSTEM_ADMIN
  PATIENT
  DOCTOR
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  password       String
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  languageSpeak  String?          @default("en-US")
  languageText   String?          @default("en-US")
  gender         GENDER?
  HealthRecords  HealthRecord[]
  Goals          Goals[]
  Conversations  Conversation[]
  role           Role             @default(PATIENT)
  company        Company?         @relation(fields: [companyId], references: [id])
  companyId      String?
  isConfigured   Boolean          @default(false)
  UserWorkspaces UserWorkspace[]
  invitations    UserInvitation[]
}

model UserInvitation {
  id         String    @id @default(cuid())
  email      String
  role       Role
  token      String    @unique
  expiresAt  DateTime
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  createdAt  DateTime  @default(now())
  acceptedAt DateTime?
}

model Company {
  id        String   @id @default(uuid())
  name      String
  purpose   String
  telemetry Boolean
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HealthRecord {
  id            String   @id @default(cuid())
  userId        String
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  stepCount     Int?
  heartRate     Int?
  bloodPressure Int?
  bloodOxygen   Int?
}

model Goals {
  id        String   @id @default(cuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  weight    Float?
  calories  Int?
}

model Conversation {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  User      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      CONVERSATION_TYPE
  author    AUTHOR
  message   String
  timestamp DateTime          @default(now())
}

model UserWorkspace {
  id                   String                @id @default(cuid())
  userId               String
  name                 String
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Configuration        Configuration?
  WorkspaceInvitations WorkspaceInvitation[]
}

model Configuration {
  id                String   @id @default(uuid())
  workspaceId       String   @unique
  useOfApis         Boolean
  telemetryEnabled  Boolean
  patientSelfHelp   Boolean
  aiModels          String[]
  selectedEmbedding String?
  apiUrl            String
  vectorDbUrl       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  workspace UserWorkspace @relation(fields: [workspaceId], references: [id])
}

model WorkspaceInvitation {
  id            String        @id @default(cuid())
  email         String
  role          Role
  token         String        @unique
  expiresAt     DateTime
  acceptedAt    DateTime?
  workspaceId   String
  UserWorkspace UserWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum GENDER {
  Male
  Female
  Others
}

enum CONVERSATION_TYPE {
  Query
  Support
}

enum AUTHOR {
  user
  bot
}
